{"version":3,"sources":["../../src/bin/gtfs-to-geojson.ts","../../src/lib/gtfs-to-geojson.ts","../../src/lib/file-utils.ts","../../node_modules/untildify/index.js","../../src/lib/formatters.ts","../../src/lib/log-utils.ts","../../src/lib/formats/envelope.ts","../../src/lib/geojson-utils.ts","../../src/lib/formats/convex.ts","../../src/lib/formats/lines-and-stops.ts","../../src/lib/formats/lines.ts","../../src/lib/formats/lines-buffer.ts","../../src/lib/formats/lines-dissolved.ts","../../src/lib/formats/stops.ts","../../src/lib/formats/stops-buffer.ts","../../src/lib/formats/stops-dissolved.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport yargs from 'yargs';\nimport { hideBin } from 'yargs/helpers';\nimport PrettyError from 'pretty-error';\n\nimport gtfsToGeoJSON from '../lib/gtfs-to-geojson.js';\nimport { getConfig } from '../lib/file-utils.js';\nimport { formatError } from '../lib/log-utils.js';\n\nconst pe = new PrettyError();\n\nconst { argv } = yargs(hideBin(process.argv))\n  .usage('Usage: $0 --config ./config.json')\n  .help()\n  .option('c', {\n    alias: 'configPath',\n    describe: 'Path to config file',\n    default: './config.json',\n    type: 'string',\n  })\n  .option('s', {\n    alias: 'skipImport',\n    describe: \"Don't import GTFS file.\",\n    type: 'boolean',\n  })\n  .default('skipImport', undefined);\n\nconst handleError = (error: any) => {\n  const text = error || 'Unknown Error';\n  process.stdout.write(`\\n${formatError(text)}\\n`);\n  console.error(pe.render(error));\n  process.exit(1);\n};\n\nconst setupImport = async () => {\n  const config = await getConfig(argv);\n  await gtfsToGeoJSON(config);\n  process.exit();\n};\n\nsetupImport().catch(handleError);\n","import path from 'node:path';\nimport { readFileSync } from 'node:fs';\nimport { rm, mkdir, writeFile } from 'node:fs/promises';\n\nimport { clone, omit, uniqBy } from 'lodash-es';\nimport { getRoutes, getTrips, openDb, importGtfs } from 'gtfs';\nimport pLimit from 'p-limit';\nimport Timer from 'timer-machine';\nimport sqlString from 'sqlstring-sqlite';\nimport sanitize from 'sanitize-filename';\n\nimport { getExportPath, zipFolder } from './file-utils.js';\nimport { msToSeconds } from './formatters.js';\nimport {\n  log,\n  logError,\n  logWarning,\n  generateLogText,\n  logStats,\n  progressBar,\n} from './log-utils.js';\n\nimport envelope from './formats/envelope.js';\nimport convex from './formats/convex.js';\nimport linesAndStops from './formats/lines-and-stops.js';\nimport lines from './formats/lines.js';\nimport linesBuffer from './formats/lines-buffer.js';\nimport linesDissolved from './formats/lines-dissolved.js';\nimport stops from './formats/stops.js';\nimport stopsBuffer from './formats/stops-buffer.js';\nimport stopsDissolved from './formats/stops-dissolved.js';\n\ninterface IConfig {\n  agencies: {\n    agency_key: string;\n    url?: string;\n    path?: string;\n    exclude?: string[];\n  }[];\n  bufferSizeMeters?: number;\n  coordinatePrecision?: number;\n  outputType?: string;\n  outputFormat?: string;\n  startDate?: string;\n  endDate?: string;\n  verbose?: boolean;\n  zipOutput?: boolean;\n  sqlitePath?: string;\n  log: (text: string) => void;\n  logWarning: (text: string) => void;\n  logError: (text: string) => void;\n}\n\ninterface IShape {\n  shape_id: string;\n}\n\nconst limit = pLimit(20);\n\nconst { version } = JSON.parse(\n  readFileSync(new URL('../../package.json', import.meta.url).pathname, 'utf8'),\n);\n\nconst setDefaultConfig = (initialConfig: IConfig) => {\n  const defaults = {\n    gtfsToGeoJSONVersion: version,\n    bufferSizeMeters: 400,\n    outputType: 'agency',\n    outputFormat: 'lines-and-stops',\n    skipImport: false,\n    verbose: true,\n    zipOutput: false,\n    log: log(initialConfig),\n    logWarning: logWarning(initialConfig),\n    logError: logError(initialConfig),\n  };\n\n  return Object.assign(defaults, initialConfig);\n};\n\n/*\n * Get a list of service_id for a specified date range\n */\nconst getServiceIdsForDateRange = (config: IConfig) => {\n  const db = openDb(config);\n  let whereClause = '';\n  const whereClauses = [];\n\n  if (config.endDate) {\n    whereClauses.push(`start_date <= ${sqlString.escape(config.endDate)}`);\n  }\n\n  if (config.startDate) {\n    whereClauses.push(`end_date >= ${sqlString.escape(config.startDate)}`);\n  }\n\n  if (whereClauses.length > 0) {\n    whereClause = `WHERE ${whereClauses.join(' AND ')}`;\n  }\n\n  const calendars = db.prepare(`SELECT * FROM calendar ${whereClause}`).all();\n\n  return calendars.map(\n    (calendar: Record<string, string>) => calendar.service_id,\n  );\n};\n\nconst getGeoJSONByFormat = (config: IConfig, query = {}) => {\n  if (config.outputFormat === 'envelope') {\n    return envelope(config, query);\n  }\n\n  if (config.outputFormat === 'convex') {\n    return convex(config, query);\n  }\n\n  if (config.outputFormat === 'lines-and-stops') {\n    return linesAndStops(config, query);\n  }\n\n  if (config.outputFormat === 'lines') {\n    return lines(config, query);\n  }\n\n  if (config.outputFormat === 'lines-buffer') {\n    return linesBuffer(config, query);\n  }\n\n  if (config.outputFormat === 'lines-dissolved') {\n    return linesDissolved(config, query);\n  }\n\n  if (config.outputFormat === 'stops') {\n    return stops(config, query);\n  }\n\n  if (config.outputFormat === 'stops-buffer') {\n    return stopsBuffer(config, query);\n  }\n\n  if (config.outputFormat === 'stops-dissolved') {\n    return stopsDissolved(config, query);\n  }\n\n  throw new Error(\n    `Invalid outputFormat=${config.outputFormat} supplied in config.json`,\n  );\n};\n\nconst buildGeoJSON = async (\n  agencyKey: string,\n  config: IConfig,\n  outputStats: { files: number; shapes: number; routes: number },\n) => {\n  const db = openDb(config);\n  const baseQuery: { service_id?: string | string[] } = {};\n\n  if (config.startDate || config.endDate) {\n    const serviceIds: string[] = getServiceIdsForDateRange(config);\n    baseQuery.service_id = serviceIds;\n  }\n\n  if (config.outputType === 'shape') {\n    const shapes: IShape[] = await db\n      .prepare('SELECT DISTINCT shape_id FROM shapes')\n      .all();\n\n    if (shapes.length === 0) {\n      throw new Error(\n        'No shapes found in shapes.txt, unable to create geoJSON with outputType = shape',\n      );\n    }\n\n    const bar = progressBar(\n      `${agencyKey}: Generating geoJSON {bar} {value}/{total}`,\n      shapes.length,\n      config,\n    );\n\n    await Promise.all(\n      shapes.map(async (shape) =>\n        limit(async () => {\n          const geojson = getGeoJSONByFormat(config, {\n            ...baseQuery,\n            shape_id: shape.shape_id,\n          });\n\n          if (!geojson) {\n            return;\n          }\n\n          outputStats.files += 1;\n          outputStats.shapes += 1;\n          const fileName = `${shape.shape_id}.geojson`;\n          const filePath = path.join(\n            getExportPath(agencyKey),\n            sanitize(fileName),\n          );\n          await writeFile(filePath, JSON.stringify(geojson));\n          bar.increment();\n        }),\n      ),\n    );\n  } else if (config.outputType === 'route') {\n    const routes = getRoutes(baseQuery);\n\n    const bar = progressBar(\n      `${agencyKey}: Generating geoJSON {bar} {value}/{total}`,\n      routes.length,\n      config,\n    );\n\n    await Promise.all(\n      routes.map(async (route, index) =>\n        limit(async () => {\n          outputStats.routes += 1;\n\n          const trips = getTrips(\n            {\n              ...baseQuery,\n              route_id: route.route_id,\n            },\n            ['trip_headsign', 'direction_id'],\n          );\n\n          const directions = uniqBy(trips, (trip) => trip.trip_headsign);\n          await Promise.all(\n            directions.map(async (direction) => {\n              const geojson = getGeoJSONByFormat(config, {\n                ...baseQuery,\n                route_id: route.route_id,\n                direction_id: direction.direction_id,\n              });\n\n              if (!geojson) {\n                return;\n              }\n\n              outputStats.files += 1;\n              const fileNameComponents = [];\n\n              if (route.agency_id !== undefined) {\n                fileNameComponents.push(route.agency_id);\n              }\n\n              fileNameComponents.push(route.route_id);\n\n              if (direction.direction_id !== undefined) {\n                fileNameComponents.push(direction.direction_id);\n              }\n\n              // Check if file name will be unique, if not append index to filename\n              const identicalRoutes = routes.filter(\n                (r) =>\n                  r.agency_id === route.agency_id &&\n                  r.route_id === route.route_id,\n              );\n              if (identicalRoutes.length > 1) {\n                fileNameComponents.push(index.toString());\n              }\n\n              const fileName = `${fileNameComponents.join('_')}.geojson`;\n\n              const filePath = path.join(\n                getExportPath(agencyKey),\n                sanitize(fileName),\n              );\n              await writeFile(filePath, JSON.stringify(geojson));\n            }),\n          );\n\n          bar.increment();\n        }),\n      ),\n    );\n  } else if (config.outputType === 'agency') {\n    config.log(`${agencyKey}: Generating geoJSON`);\n\n    const geojson = getGeoJSONByFormat(config, baseQuery);\n    outputStats.files += 1;\n    const fileName = `${agencyKey}.geojson`;\n    const filePath = path.join(getExportPath(agencyKey), sanitize(fileName));\n    await writeFile(filePath, JSON.stringify(geojson));\n  } else {\n    throw new Error(\n      `Invalid outputType=${config.outputType} supplied in config.json`,\n    );\n  }\n};\n\nconst gtfsToGeoJSON = async (initialConfig: IConfig) => {\n  const config = setDefaultConfig(initialConfig);\n\n  await openDb(config);\n\n  /* eslint-disable no-await-in-loop */\n  for (const agency of config.agencies) {\n    const timer = new Timer();\n    timer.start();\n\n    const outputStats = {\n      routes: 0,\n      shapes: 0,\n      files: 0,\n    };\n\n    const agencyKey = agency.agency_key;\n    const exportPath = getExportPath(agencyKey);\n\n    // Exclude files that are not needed for GeoJSON creation\n    agency.exclude = [\n      'areas',\n      'attributions',\n      'booking_rules',\n      'fare_attributes',\n      'fare_leg_rules',\n      'fare_media',\n      'fare_products',\n      'fare_rules',\n      'fare_transfer_rules',\n      'levels',\n      'pathways',\n      'stop_areas',\n      'timeframes',\n      'transfers',\n      ...(agency.exclude ?? []),\n    ];\n\n    if (config.skipImport !== true) {\n      // Import GTFS\n      const agencyConfig = {\n        ...clone(omit(config, 'agencies')),\n        agencies: [agency],\n      };\n\n      await importGtfs(agencyConfig);\n    }\n\n    await rm(exportPath, { recursive: true, force: true });\n    await mkdir(exportPath, { recursive: true });\n\n    await buildGeoJSON(agencyKey, config, outputStats);\n\n    // Zip output, if specified\n    if (config.zipOutput) {\n      await zipFolder(exportPath);\n    }\n\n    let geojsonPath = `${process.cwd()}/${exportPath}`;\n    if (config.zipOutput) {\n      geojsonPath += '/geojson.zip';\n    }\n\n    // Generate output log.txt\n    const logText = generateLogText(agency, outputStats, config);\n    const filePath = path.join(exportPath, 'log.txt');\n    await writeFile(filePath, logText);\n\n    config.log(`GeoJSON for ${agencyKey} created at ${geojsonPath}`);\n\n    logStats(outputStats, config);\n\n    timer.stop();\n    config.log(\n      `GeoJSON generation required ${msToSeconds(timer.time())} seconds`,\n    );\n  }\n  /* eslint-enable no-await-in-loop */\n};\n\nexport default gtfsToGeoJSON;\n","import path from 'node:path';\nimport { createWriteStream } from 'node:fs';\nimport { readFile, stat } from 'node:fs/promises';\n\nimport archiver from 'archiver';\nimport untildify from 'untildify';\nimport sanitize from 'sanitize-filename';\n\n/*\n * Attempt to parse the specified config JSON file.\n */\nexport async function getConfig(argv) {\n  let data;\n  let config;\n\n  try {\n    data = await readFile(path.resolve(untildify(argv.configPath)), 'utf8');\n  } catch (error) {\n    throw new Error(\n      `Cannot find configuration file at \\`${argv.configPath}\\`. Use config-sample.json as a starting point, pass --configPath option`,\n    );\n  }\n\n  try {\n    config = JSON.parse(data);\n  } catch (error) {\n    throw new Error(\n      `Cannot parse configuration file at \\`${argv.configPath}\\`. Check to ensure that it is valid JSON.`,\n    );\n  }\n\n  if (argv.skipImport === true) {\n    config.skipImport = argv.skipImport;\n  }\n\n  return config;\n}\n\nexport function zipFolder(exportPath) {\n  const output = createWriteStream(path.join(exportPath, 'geojson.zip'));\n  const archive = archiver('zip');\n\n  return new Promise((resolve, reject) => {\n    output.on('close', resolve);\n    archive.on('error', reject);\n    archive.pipe(output);\n    archive.glob(`${exportPath}/**/*.{json}`);\n    archive.finalize();\n  });\n}\n\nexport function getExportPath(agencyKey) {\n  return path.join('geojson', sanitize(agencyKey));\n}\n\nexport async function checkFileExists(filePath) {\n  return !!(await stat(filePath).catch((e) => false));\n}\n","import os from 'node:os';\n\nconst homeDirectory = os.homedir();\n\nexport default function untildify(pathWithTilde) {\n\tif (typeof pathWithTilde !== 'string') {\n\t\tthrow new TypeError(`Expected a string, got ${typeof pathWithTilde}`);\n\t}\n\n\treturn homeDirectory ? pathWithTilde.replace(/^~(?=$|\\/|\\\\)/, homeDirectory) : pathWithTilde;\n}\n","export function msToSeconds(ms) {\n  return Math.round(ms / 1000);\n}\n","import { clearLine, cursorTo } from 'node:readline';\nimport * as colors from 'yoctocolors';\nimport { getFeedInfo } from 'gtfs';\nimport { noop } from 'lodash-es';\nimport Table from 'cli-table';\n\n/*\n * Creates text for a log of output details.\n */\nexport function generateLogText(agency, outputStats, config) {\n  const feedInfo = getFeedInfo();\n  const feedVersion =\n    feedInfo.length > 0 && feedInfo[0].feed_version\n      ? feedInfo[0].feed_version\n      : 'Unknown';\n\n  const logText = [\n    `Feed Version: ${feedVersion}`,\n    `GTFS-to-geoJSON Version: ${config.gtfsToGeoJSONVersion}`,\n    `Date Generated: ${new Date()}`,\n    `Route Count: ${outputStats.routes}`,\n    `Shape Count: ${outputStats.shapes}`,\n    `GeoJSON File Count: ${outputStats.files}`,\n    `Output Type: ${config.outputType}`,\n  ];\n\n  if (agency.url) {\n    logText.push(`Source: ${agency.url}`);\n  } else if (agency.path) {\n    logText.push(`Source: ${agency.path}`);\n  }\n\n  return logText.join('\\n');\n}\n\n/*\n * Returns a log function based on config settings\n */\nexport function log(config) {\n  if (config.verbose === false) {\n    return noop;\n  }\n\n  if (config.logFunction) {\n    return config.logFunction;\n  }\n\n  return (text, overwrite) => {\n    if (overwrite === true && process.stdout.isTTY) {\n      clearLine(process.stdout, 0);\n      cursorTo(process.stdout, 0);\n    } else {\n      process.stdout.write('\\n');\n    }\n\n    process.stdout.write(text);\n  };\n}\n\n/*\n * Returns an warning log function based on config settings\n */\nexport function logWarning(config) {\n  if (config.logFunction) {\n    return config.logFunction;\n  }\n\n  return (text) => {\n    process.stdout.write(`\\n${formatWarning(text)}\\n`);\n  };\n}\n\n/*\n * Returns an error log function based on config settings\n */\nexport function logError(config) {\n  if (config.logFunction) {\n    return config.logFunction;\n  }\n\n  return (text) => {\n    process.stdout.write(`\\n${formatError(text)}\\n`);\n  };\n}\n\n/*\n * Format console warning text\n */\nexport function formatWarning(text) {\n  const warningMessage = `${colors.underline('Warning')}: ${text}`;\n  return colors.yellow(warningMessage);\n}\n\n/*\n * Format console error text\n */\nexport function formatError(error) {\n  const messageText = error instanceof Error ? error.message : error;\n  const errorMessage = `${colors.underline('Error')}: ${messageText.replace(\n    'Error: ',\n    '',\n  )}`;\n  return colors.red(errorMessage);\n}\n\n/*\n * Print a table of stats to the console.\n */\nexport function logStats(stats, config) {\n  // Hide stats table from custom log functions\n  if (config.logFunction) {\n    return;\n  }\n\n  const table = new Table({\n    colWidths: [40, 20],\n    head: ['Item', 'Count'],\n  });\n\n  table.push(\n    ['📝 Output Type', config.outputType],\n    ['🔄 Routes', stats.routes],\n    ['⎭ Shapes', stats.shapes],\n    ['📄 GeoJSON Files', stats.files],\n  );\n\n  config.log(table.toString());\n}\n\n/*\n * Create progress bar text string\n */\nconst generateProgressBarString = (barTotal, barProgress, size = 40) => {\n  const line = '-';\n  const slider = '=';\n  if (!barTotal) {\n    throw new Error('Total value is either not provided or invalid');\n  }\n\n  if (!barProgress && barProgress !== 0) {\n    throw new Error('Current value is either not provided or invalid');\n  }\n\n  if (isNaN(barTotal)) {\n    throw new Error('Total value is not an integer');\n  }\n\n  if (isNaN(barProgress)) {\n    throw new Error('Current value is not an integer');\n  }\n\n  if (isNaN(size)) {\n    throw new Error('Size is not an integer');\n  }\n\n  if (barProgress > barTotal) {\n    return slider.repeat(size + 2);\n  }\n\n  const percentage = barProgress / barTotal;\n  const progress = Math.round(size * percentage);\n  const emptyProgress = size - progress;\n  const progressText = slider.repeat(progress);\n  const emptyProgressText = line.repeat(emptyProgress);\n  return progressText + emptyProgressText;\n};\n\n/*\n * Print a progress bar to the console.\n */\nexport function progressBar(formatString: string, barTotal: number, config) {\n  let barProgress = 0;\n\n  if (config.verbose === false) {\n    return {\n      increment: noop,\n      interrupt: noop,\n    };\n  }\n\n  if (barTotal === 0) {\n    return {\n      interrupt(text: string) {},\n      increment() {},\n    };\n  }\n\n  const renderProgressString = () =>\n    formatString\n      .replace('{value}', barProgress)\n      .replace('{total}', barTotal)\n      .replace('{bar}', generateProgressBarString(barTotal, barProgress));\n\n  config.log(renderProgressString(), true);\n\n  return {\n    interrupt(text: string) {\n      // Log two lines to avoid overwrite by progress bar\n      config.logWarning(text);\n      config.log('');\n    },\n    increment() {\n      barProgress += 1;\n      config.log(renderProgressString(), true);\n    },\n  };\n}\n","import bbox from '@turf/bbox';\nimport bboxPoly from '@turf/bbox-polygon';\nimport { featureEach } from '@turf/meta';\n\nimport { getRouteLinesAsGeoJSON, simplifyGeoJSON } from '../geojson-utils.js';\n\nconst envelope = (config, query = {}) => {\n  const lines = getRouteLinesAsGeoJSON(query);\n  const geojson = bboxPoly(bbox(lines));\n\n  featureEach(geojson, (feature) => {\n    // Assign agency_name\n    feature.properties = {\n      ...(feature.properties || {}),\n      agency_name: lines.features[0].properties.agency_name,\n    };\n  });\n\n  return simplifyGeoJSON(geojson, config);\n};\n\nexport default envelope;\n","import { cloneDeep, flatMap, maxBy, omitBy, size } from 'lodash-es';\nimport { feature, featureCollection } from '@turf/helpers';\nimport { featureEach } from '@turf/meta';\nimport simplify from '@turf/simplify';\nimport union from '@turf/union';\nimport {\n  getRouteAttributes,\n  getRoutes,\n  getShapesAsGeoJSON,\n  getStops,\n  getStoptimes,\n  getTrips,\n} from 'gtfs';\nimport toposort from 'toposort';\n\nfunction formatHexColor(color) {\n  if (color === null || color === undefined) {\n    return;\n  }\n\n  return `#${color}`;\n}\n\nfunction formatProperties(properties) {\n  const formattedProperties = {\n    ...cloneDeep(omitBy(properties, (value) => value === null)),\n    route_color: formatHexColor(properties.route_color),\n    route_text_color: formatHexColor(properties.route_text_color),\n  };\n\n  if (properties.routes) {\n    formattedProperties.routes = properties.routes.map((route) =>\n      formatProperties(route),\n    );\n  }\n\n  return formattedProperties;\n}\n\nconst truncateCoordinate = (coordinate, precision) => [\n  Math.round(coordinate[0] * 10 ** precision) / 10 ** precision,\n  Math.round(coordinate[1] * 10 ** precision) / 10 ** precision,\n];\n\nconst truncateGeoJSONDecimals = (geojson, config) => {\n  featureEach(geojson, (feature) => {\n    if (feature.geometry.coordinates) {\n      if (feature.geometry.type.toLowerCase() === 'point') {\n        feature.geometry.coordinates = truncateCoordinate(\n          feature.geometry.coordinates,\n          config.coordinatePrecision,\n        );\n      } else if (feature.geometry.type.toLowerCase() === 'linestring') {\n        feature.geometry.coordinates = feature.geometry.coordinates.map(\n          (coordinate) =>\n            truncateCoordinate(coordinate, config.coordinatePrecision),\n        );\n      } else if (feature.geometry.type.toLowerCase() === 'polygon') {\n        feature.geometry.coordinates = feature.geometry.coordinates.map(\n          (line) =>\n            line.map((coordinate) =>\n              truncateCoordinate(coordinate, config.coordinatePrecision),\n            ),\n        );\n      } else if (feature.geometry.type.toLowerCase() === 'multipolygon') {\n        feature.geometry.coordinates = feature.geometry.coordinates.map(\n          (polygon) =>\n            polygon.map((line) =>\n              line.map((coordinate) =>\n                truncateCoordinate(coordinate, config.coordinatePrecision),\n              ),\n            ),\n        );\n      }\n    }\n  });\n\n  return geojson;\n};\n\n/*\n * Merge any number of geojson objects into one. Only works for `FeatureCollection`.\n */\nexport function mergeGeojson(...geojsons) {\n  return featureCollection(flatMap(geojsons, (geojson) => geojson.features));\n}\n\n/*\n * Simplify geojson and truncate decimals to precision specified in config.\n */\nexport function simplifyGeoJSON(geojson, config) {\n  if (config.coordinatePrecision === undefined) {\n    return geojson;\n  }\n\n  if (geojson?.type?.toLowerCase() === 'featurecollection') {\n    geojson.features = geojson.features.map((feature) =>\n      simplifyGeoJSON(feature, config),\n    );\n    return geojson;\n  }\n\n  if (geojson?.geometry?.type?.toLowerCase() === 'multipolygon') {\n    return truncateGeoJSONDecimals(geojson, config);\n  }\n\n  try {\n    const simplifiedGeojson = simplify(geojson, {\n      tolerance: 1 / 10 ** config.coordinatePrecision,\n      highQuality: true,\n    });\n\n    return truncateGeoJSONDecimals(simplifiedGeojson, config);\n  } catch {\n    config.logWarning('Unable to simplify geojson');\n\n    return truncateGeoJSONDecimals(geojson, config);\n  }\n}\n\nexport function stripNonAgencyProperties(geojson) {\n  featureEach(geojson, (feature) => {\n    feature.properties = {\n      agency_name: feature.properties.agency_name,\n    };\n  });\n\n  return geojson;\n}\n\nexport function unionGeojson(geojson, config) {\n  if (geojson.features.length === 1) {\n    return geojson;\n  }\n\n  try {\n    return union(featureCollection(geojson.features));\n  } catch {\n    config.logWarning('Unable to dissolve geojson');\n    return geojson;\n  }\n}\n\nfunction getOrderedStopIdsForRoute(routeId) {\n  const trips = getTrips({ route_id: routeId });\n\n  for (const trip of trips) {\n    trip.stoptimes = getStoptimes(\n      { trip_id: trip.trip_id },\n      [],\n      [['stop_sequence', 'ASC']],\n    );\n  }\n\n  // Try using a directed graph to determine stop order.\n  try {\n    const stopGraph = [];\n\n    for (const trip of trips) {\n      const sortedStopIds = trip.stoptimes.map((stoptime) => stoptime.stop_id);\n\n      for (const [index, stopId] of sortedStopIds.entries()) {\n        if (index === sortedStopIds.length - 1) {\n          continue;\n        }\n\n        stopGraph.push([stopId, sortedStopIds[index + 1]]);\n      }\n    }\n\n    return toposort(stopGraph);\n  } catch {\n    // Ignore errors and move to next strategy.\n  }\n\n  // Fall back to using the stop order from the trip with the most stoptimes.\n  const longestTrip = maxBy(trips, (trip) => size(trip.stoptimes));\n  return longestTrip.stoptimes.map((stoptime) => stoptime.stop_id);\n}\n\nexport function getRouteLinesAsGeoJSON(query) {\n  const geojson = getShapesAsGeoJSON(query);\n\n  // Use shapes from shapes.txt if available\n  if (geojson.features.length > 0) {\n    return geojson;\n  }\n\n  // Fall back to using stops if no shapes are available\n  if (query.shape_id) {\n    throw new Error(\n      'No shapes found in shapes.txt, unable to create geoJSON with outputType = shape',\n    );\n  }\n\n  // Get a single route or all routes depending on query\n  const routes = query.route_id\n    ? getRoutes({ route_id: query.route_id })\n    : getRoutes();\n\n  return featureCollection(\n    routes.map((route) => {\n      const orderedStopIds = getOrderedStopIdsForRoute(route.route_id);\n      const stops = getStops({ stop_id: orderedStopIds }, [\n        'stop_id',\n        'stop_lat',\n        'stop_lon',\n      ]);\n      const orderedStops = orderedStopIds.map((stopId) =>\n        stops.find((stop) => stop.stop_id === stopId),\n      );\n      const routeAttributes =\n        getRouteAttributes({ route_id: route.route_id }) ?? {};\n\n      return feature(\n        {\n          type: 'LineString',\n          coordinates: orderedStops.map((stop) => [\n            stop.stop_lon,\n            stop.stop_lat,\n          ]),\n        },\n        formatProperties({ route, routeAttributes }),\n      );\n    }),\n  );\n}\n","import { getStopsAsGeoJSON } from 'gtfs';\nimport turfConvex from '@turf/convex';\nimport { featureEach } from '@turf/meta';\n\nimport { simplifyGeoJSON } from '../geojson-utils.js';\n\nconst convex = (config, query = {}) => {\n  const stops = getStopsAsGeoJSON(query);\n  const geojson = turfConvex(stops);\n\n  if (!geojson) {\n    if (query.route_id && query.direction_id) {\n      config.logWarning(\n        `Unable to calculate convex hull for route: ${query.route_id} direction: ${query.direction_id}`,\n      );\n    } else {\n      config.logWarning('Unable to calculate convex hull');\n    }\n    return null;\n  }\n\n  featureEach(geojson, (feature) => {\n    // Assign agency_name\n    feature.properties = {\n      ...(feature.properties || {}),\n      agency_name: stops.features[0].properties.agency_name,\n    };\n  });\n\n  return simplifyGeoJSON(geojson, config);\n};\n\nexport default convex;\n","import { getStopsAsGeoJSON } from 'gtfs';\n\nimport {\n  getRouteLinesAsGeoJSON,\n  mergeGeojson,\n  simplifyGeoJSON,\n} from '../geojson-utils.js';\n\nconst linesAndStops = (config, query = {}) => {\n  const shapesGeojson = getRouteLinesAsGeoJSON(query);\n  const stopsGeojson = getStopsAsGeoJSON(query);\n  const geojson = mergeGeojson(shapesGeojson, stopsGeojson);\n\n  return simplifyGeoJSON(geojson, config);\n};\n\nexport default linesAndStops;\n","import { getRouteLinesAsGeoJSON, simplifyGeoJSON } from '../geojson-utils.js';\n\nconst lines = (config, query = {}) => {\n  const geojson = getRouteLinesAsGeoJSON(query);\n\n  return simplifyGeoJSON(geojson, config);\n};\n\nexport default lines;\n","import buffer from '@turf/buffer';\n\nimport { getRouteLinesAsGeoJSON, simplifyGeoJSON } from '../geojson-utils.js';\n\nconst linesBuffer = (config, query = {}) => {\n  const lines = getRouteLinesAsGeoJSON(query);\n  const geojson = buffer(lines, config.bufferSizeMeters, { units: 'meters' });\n\n  return simplifyGeoJSON(geojson, config);\n};\n\nexport default linesBuffer;\n","import buffer from '@turf/buffer';\n\nimport {\n  getRouteLinesAsGeoJSON,\n  simplifyGeoJSON,\n  unionGeojson,\n} from '../geojson-utils.js';\n\nconst linesDissolved = (config, query = {}) => {\n  const lines = getRouteLinesAsGeoJSON(query);\n  const bufferedLines = buffer(lines, config.bufferSizeMeters, {\n    units: 'meters',\n  });\n\n  // Simplify geoJSON buffers before unioning\n  const simplifiedBufferedLines = simplifyGeoJSON(bufferedLines, config);\n  const geojson = unionGeojson(simplifiedBufferedLines, config);\n\n  // Assign agency_name\n  geojson.properties = {\n    ...(geojson.properties || {}),\n    agency_name: bufferedLines.features[0].properties.agency_name,\n  };\n\n  return simplifyGeoJSON(geojson, config);\n};\n\nexport default linesDissolved;\n","import { getStopsAsGeoJSON } from 'gtfs';\n\nimport { simplifyGeoJSON } from '../geojson-utils.js';\n\nconst stops = (config, query = {}) => {\n  const geojson = getStopsAsGeoJSON(query);\n\n  return simplifyGeoJSON(geojson, config);\n};\n\nexport default stops;\n","import { getStopsAsGeoJSON } from 'gtfs';\nimport buffer from '@turf/buffer';\n\nimport { simplifyGeoJSON } from '../geojson-utils.js';\n\nconst stopsBuffer = (config, query = {}) => {\n  const stops = getStopsAsGeoJSON(query);\n\n  const geojson = buffer(stops, config.bufferSizeMeters, { units: 'meters' });\n\n  return simplifyGeoJSON(geojson, config);\n};\n\nexport default stopsBuffer;\n","import { getStopsAsGeoJSON } from 'gtfs';\nimport buffer from '@turf/buffer';\n\nimport { simplifyGeoJSON, unionGeojson } from '../geojson-utils.js';\n\nconst stopsDissolved = (config, query = {}) => {\n  const stops = getStopsAsGeoJSON(query);\n  const bufferedStops = buffer(stops, config.bufferSizeMeters, {\n    units: 'meters',\n  });\n\n  // Simplify geoJSON buffers before unioning\n  const simplifiedBufferedStops = simplifyGeoJSON(bufferedStops, config);\n  const geojson = unionGeojson(simplifiedBufferedStops, config);\n\n  // Assign agency_name\n  geojson.properties = {\n    ...(geojson.properties || {}),\n    agency_name: bufferedStops.features[0].properties.agency_name,\n  };\n\n  return simplifyGeoJSON(geojson, config);\n};\n\nexport default stopsDissolved;\n"],"mappings":"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","names":["path","getRoutes","getTrips","sanitize","argv","size","featureEach","feature","stops","lines","featureEach","feature","featureEach","stops","featureEach","feature","getStopsAsGeoJSON","getStopsAsGeoJSON","lines","buffer","lines","buffer","getStopsAsGeoJSON","getStopsAsGeoJSON","getStopsAsGeoJSON","buffer","stops","getStopsAsGeoJSON","buffer","getStopsAsGeoJSON","buffer","stops","getStopsAsGeoJSON","buffer","path","sanitize","getRoutes","getTrips"]}